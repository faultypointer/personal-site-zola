<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>FaultyPointer</title>
	<subtitle>My blog page</subtitle>
	<link href="https://faultypointer.netlify.app/blog/feed.xml" rel="self" type="application/atom+xml"/>
    <link href="https://faultypointer.netlify.app/blog/"/>
	<updated>2023-06-21T00:00:00+00:00</updated>
	<id>https://faultypointer.netlify.app/blog/feed.xml</id>
	<entry xml:lang="en">
		<title>On a quest to understand Basics of Operating System - OS Concepts</title>
		<published>2023-06-21T00:00:00+00:00</published>
		<updated>2023-06-21T00:00:00+00:00</updated>
		<link href="https://faultypointer.netlify.app/blog/jttcoos-basics-of-os-concepts/" type="text/html"/>
		<id>https://faultypointer.netlify.app/blog/jttcoos-basics-of-os-concepts/</id>
		<content type="html">&lt;p&gt;In the first part of this blog series, we delved into the hardware components closely tied to operating systems. Now, let&#x27;s shift our focus to the fundamental concepts that form the core of an operating system: processes, files, I&#x2F;O, the shell, and system calls. Understanding these concepts will provide us with a deeper insight into how the operating system manages resources and enables efficient communication between the user and the hardware.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;processes&quot;&gt;Processes&lt;&#x2F;h2&gt;
&lt;p&gt;A process is basically an instance of a program in execution. Each process has its &lt;strong&gt;address space&lt;&#x2F;strong&gt;, which is a list of memory locations that contains the executable program, program&#x27;s data and its stack. The OS assigns each process a process ID (PID), manages its memory allocation, and handles its scheduling to use CPU time. The OS also handles process creation, termination, creation of child processes, and inter-process communication. The OS maintains info about each process&#x27;s state (running, waiting, etc.), priority, resources used, and user ID.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;files&quot;&gt;Files&lt;&#x2F;h2&gt;
&lt;p&gt;Files serve as a means of storing and organizing data on secondary storage devices, such as hard drives. The operating system provides a file system that manages files, allowing users and programs to create, read, write, and delete files. A file system organizes data into directories or folders, providing a hierarchical structure for easy navigation and management. The operating system also ensures file security by implementing access control mechanisms, allowing only authorized users to access or modify files.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;i-o-management&quot;&gt;I&#x2F;O Management&lt;&#x2F;h2&gt;
&lt;p&gt;Input&#x2F;Output (I&#x2F;O) management is a crucial aspect of any operating system. It enables the transfer of data between the computer and its peripheral devices, such as keyboards, mice, displays, and printers. The operating system abstracts the complexities of different devices and provides a unified interface for I&#x2F;O operations. Device drivers, mentioned earlier, play a vital role in facilitating communication between the operating system and the devices, handling data transfers, and managing interrupts.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-shell&quot;&gt;The Shell&lt;&#x2F;h2&gt;
&lt;p&gt;The shell acts as a command interpreter, serving as the interface between the user and the operating system. It provides a command-line or graphical interface through which users can interact with the system. The shell allows users to execute commands, run programs, navigate the file system, and manipulate files. Additionally, it supports features like scripting, batch processing, and job control, providing flexibility and automation capabilities to users.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;system-calls&quot;&gt;System Calls&lt;&#x2F;h2&gt;
&lt;p&gt;System calls are the primary means by which user programs request services from the operating system. They act as an interface between user space and kernel space, allowing user programs to access privileged operations and interact with hardware resources. System calls provide functionalities such as process creation, file management, network communication, and device access. Examples of system calls include opening or closing a file, reading from or writing to a file, creating a new process, and allocating memory.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Operating systems are complex entities that manage hardware resources and provide essential services to users and applications. By exploring concepts like processes, files, I&#x2F;O management, the shell, and system calls, we gain a deeper understanding of how the operating system orchestrates these components to deliver a seamless computing experience.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>On a quest to understand Basics of Operating System - The Hardware</title>
		<published>2023-06-17T00:00:00+00:00</published>
		<updated>2023-06-17T00:00:00+00:00</updated>
		<link href="https://faultypointer.netlify.app/blog/jttcoos-basics-of-os-hardware/" type="text/html"/>
		<id>https://faultypointer.netlify.app/blog/jttcoos-basics-of-os-hardware/</id>
		<content type="html">&lt;p&gt;Since operating system is closely tied to the hardware of the computer it operates upon, understanding the underlying hardware makes it a bit easy to understand the workings of operating system. So let us start reviewing the various components of computer hardware in brief&lt;&#x2F;p&gt;
&lt;h2 id=&quot;processors&quot;&gt;Processors&lt;&#x2F;h2&gt;
&lt;p&gt;Processors serve as the central processing unit (CPU) and act as the brain of the computer. They function in a continuous cycle, where they retrieve instructions from the memory, decode and execute them, and move on to the next instruction. Processors contain registers that store essential variables and temporary results. Additionally, they possess special registers that play distinct roles:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Program Counter: Holds the memory address of the next instruction to be fetched.&lt;&#x2F;li&gt;
&lt;li&gt;Stack Pointer: Indicates the top of the current stack in memory.&lt;&#x2F;li&gt;
&lt;li&gt;Program Status Word: Contains condition code bits.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Modern computers employ a pipeline model, enabling the execution of multiple instructions simultaneously.&lt;&#x2F;p&gt;
&lt;p&gt;Another critical aspect of modern operating systems is the presence of two modes in which programs run: kernel mode and user mode. In kernel mode, the processor can utilize all hardware features and execute every instruction in the instruction set. On the other hand, user mode imposes restrictions on certain instructions and allows only a subset of instructions to be executed. Programs running in user mode must make a &lt;em&gt;system call&lt;&#x2F;em&gt; to obtain services from the operating system.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;memory-storing-and-accessing-data&quot;&gt;Memory: Storing and Accessing Data&lt;&#x2F;h2&gt;
&lt;p&gt;The memory of a computer system is constructed in a hierarchical manner, with each layer possessing varying characteristics in terms of speed, capacity, and cost per bit.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;registers-the-fastest-memory-layer&quot;&gt;Registers: The Fastest Memory Layer&lt;&#x2F;h3&gt;
&lt;p&gt;Registers represent the top layer of the computer memory hierarchy. Composed of the same material as the CPU, registers offer lightning-fast access. Typically, registers have a storage capacity of less than 1 KiB.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;cache-bridging-the-gap&quot;&gt;Cache: Bridging the Gap&lt;&#x2F;h3&gt;
&lt;p&gt;Cache serves as the second layer of the memory hierarchy. Modern CPUs have two levels of cache. L1 cache resides inside the CPU and feeds instructions to the CPU. L2 cache retains recently used memory words, ensuring swift access.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ram-main-memory&quot;&gt;RAM: Main Memory&lt;&#x2F;h3&gt;
&lt;p&gt;The next layer in the memory hierarchy is the main memory or Random Access Memory (RAM). All data requests that cannot be fulfilled by the cache are directed to the main memory.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;i-o-devices&quot;&gt;I&#x2F;O Devices&lt;&#x2F;h2&gt;
&lt;p&gt;Operating systems extensively interact with input&#x2F;output (I&#x2F;O) devices. These devices generally consist of two components: a controller and the device itself. The controller is a chip that physically manages the device and provides a simplified interface to the operating system. The software responsible for communicating with the controller is known as a device driver.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;buses&quot;&gt;Buses&lt;&#x2F;h2&gt;
&lt;p&gt;Buses serve as communication pathways, connecting different hardware components within the computer. They facilitate the exchange of data and instructions between the CPU, memory, and I&#x2F;O devices. Several types of buses are found in a computer system:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;system-bus&quot;&gt;System Bus&lt;&#x2F;h3&gt;
&lt;p&gt;The system bus, also referred to as the front-side bus or memory bus, facilitates the transfer of data between the CPU and the main memory. It carries memory addresses, data, and control signals. The width of the system bus determines the volume of data transferred in a single bus cycle.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;i-o-bus&quot;&gt;I&#x2F;O Bus&lt;&#x2F;h3&gt;
&lt;p&gt;The I&#x2F;O bus, known as the peripheral bus or expansion bus, establishes the connection between the CPU and various I&#x2F;O devices such as hard drives, graphics cards, network cards, and USB devices. Different types of I&#x2F;O buses, such as PCI (Peripheral Component Interconnect) and USB (Universal Serial Bus), feature their own specifications and speeds.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;control-bus&quot;&gt;Control Bus&lt;&#x2F;h3&gt;
&lt;p&gt;The control bus transmits control signals between the CPU and other hardware components. These signals include read and write signals to indicate data transfer operations, interrupt signals to request attention from the CPU, and clock signals to synchronize the operations of different components.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;address-bus&quot;&gt;Address Bus&lt;&#x2F;h3&gt;
&lt;p&gt;The address bus carries memory addresses from the CPU to the main memory or I&#x2F;O devices. It determines the location in memory where data needs to be read from or written to. The width of the address bus determines the maximum addressable memory.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;data-bus&quot;&gt;Data Bus&lt;&#x2F;h3&gt;
&lt;p&gt;The data bus transfers actual data between the CPU, memory, and I&#x2F;O devices. It conveys the data being read from or written to memory or I&#x2F;O devices. The width of the data bus determines the number of bits that can be transferred in a single bus cycle.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;A solid understanding of computer hardware is crucial for comprehending the inner workings of an operating system. Processors, memory, I&#x2F;O devices, and buses are integral components that collaborate with the operating system to execute instructions, store and retrieve data, and facilitate seamless communication between different hardware elements. By grasping these hardware concepts, we can gain a clearer understanding of how the operating system interacts with the underlying hardware to provide a smooth computing experience.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Building A Hello World Kernel</title>
		<published>2023-06-15T00:00:00+00:00</published>
		<updated>2023-06-15T00:00:00+00:00</updated>
		<link href="https://faultypointer.netlify.app/blog/jttcoos-building-a-hello-world-kernel/" type="text/html"/>
		<id>https://faultypointer.netlify.app/blog/jttcoos-building-a-hello-world-kernel/</id>
		<content type="html">&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;&#x2F;h2&gt;
&lt;p&gt;Reading about the workings and development of operating system is fascinating but there is still something missing. Getting your hands dirty with the code and racking your brain over something for hours only to give up and copying some code is way more interesting. Needless to say you shouldn&#x27;t give up reading the theory — maybe you can? who am I to say. I am just getting started myself.&lt;&#x2F;p&gt;
&lt;p&gt;Reading theory and writing code in parallel is the way I like to do things .That is what I am gonna do. And obviously the best way to start is to write a hello world kernel. By write I mean copy it from &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;wiki.osdev.org&#x2F;Main_Page&quot;&gt;OSDevWiki&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;before-we-get-started&quot;&gt;Before we get started&lt;&#x2F;h2&gt;
&lt;p&gt;there are few things that we should know about so that atleast we understand what is going on rather than mindlessly following the guide.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;cross-compiler&quot;&gt;Cross compiler&lt;&#x2F;h3&gt;
&lt;p&gt;Its a compiler that runs on a system(called Host) but generated the executable for another system(called Target. I am gonna show how I installed the GNU cross compiler for i686 system on linux so if you are on windows or mac get rekt. But also you can go to &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;wiki.osdev.org&#x2F;Building_GCC&quot;&gt;osdevwiki&lt;&#x2F;a&gt; to see how to build it on other system.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Installing the dependencies&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; dnf install gcc g++ make bison flex gmp-devel libmpc-devel mpfr-devel texinfo cloog-devel isl-devel
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Download and extract the source code
download the source code from &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;ftp.gnu.org&#x2F;gnu&#x2F;binutils&#x2F;&quot;&gt;binutils&lt;&#x2F;a&gt; and &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;ftp.gnu.org&#x2F;gnu&#x2F;gcc&#x2F;&quot;&gt;gcc&lt;&#x2F;a&gt; and put them where you like for eg ~&#x2F;src.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;cd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;src
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;tar&lt;&#x2F;span&gt;&lt;span&gt; xf gcc.x.stuff binutils.x.stuff
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;Preparation
decide where to install the binaries and for which system. ~&#x2F;opt&#x2F; should be a good place to install. since i am compiling for i686, target system will be i686-elf&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span&gt;PREFIX&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;HOME&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;opt&#x2F;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span&gt;TARGET&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;i686-elf
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;Installing Binutils&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;cd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;src&#x2F;binutils.x.stuff
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;mkdir&lt;&#x2F;span&gt;&lt;span&gt; build &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span&gt; build
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;..&#x2F;configure&lt;&#x2F;span&gt;&lt;span&gt; --prefix&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;PREFIX&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; --target&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;TARGET&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; --disable-nls --disable-werror
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;make
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;make&lt;&#x2F;span&gt;&lt;span&gt; install
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;Installing GCC&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;cd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;src&#x2F;gcc.x.stuff
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;mkdir&lt;&#x2F;span&gt;&lt;span&gt; build &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span&gt; build
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;..&#x2F;configure&lt;&#x2F;span&gt;&lt;span&gt; --prefix&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;PREFIX&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; --target&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;TARGET&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; --disable-nls --enable-language&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;c,c++
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;make&lt;&#x2F;span&gt;&lt;span&gt; all-gcc
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;make&lt;&#x2F;span&gt;&lt;span&gt; all-target-libgcc 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;make&lt;&#x2F;span&gt;&lt;span&gt; install-gcc
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;make&lt;&#x2F;span&gt;&lt;span&gt; install-target-libgcc
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;adding to path
add this to the .bashrc&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span&gt;PATH&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;HOME&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;opt&#x2F;bin&#x2F;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;PATH&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;booting-the-system&quot;&gt;Booting the system&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Existing piece of software is required to load our operating system which is called the bootloader. Popular bootloaders are GRUB, limine.&lt;&#x2F;li&gt;
&lt;li&gt;Bootloader follows a certain protocol that outlines the communication and data exchange between the bootloader, firmware and the kernel.&lt;&#x2F;li&gt;
&lt;li&gt;Multiboot is one such protocol. It enables the bootloader to pass important information line memory map, command line arguments and other details to the kernel.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;freestanding-and-hosted&quot;&gt;Freestanding and Hosted&lt;&#x2F;h3&gt;
&lt;p&gt;A hosted binary is an executable that is compiled to run on a specific system. It relies on standrad library provided by the host system.&lt;&#x2F;p&gt;
&lt;p&gt;A freestanding binary is one that is compiled without a specific system in mind. As such it can&#x27;t use the standrad library features.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;writing-the-kernel&quot;&gt;Writing the Kernel&lt;&#x2F;h2&gt;
&lt;p&gt;Since we are writing a kernel that prints hello world on screen without using standrad library features, we will have to make use of vga text mode. Video Graphics Array(vga) text mode is a display mode that is supported by most modern computer. &lt;&#x2F;p&gt;
&lt;h3 id=&quot;understanding-vga-text-mode&quot;&gt;Understanding VGA text mode&lt;&#x2F;h3&gt;
&lt;p&gt;In VGA text mode, the screen is divided into a rectangular grid of fixed-size character cells. Each cell can display a single character from the ASCII character set and is associated with a specific foreground and background color.&lt;&#x2F;p&gt;
&lt;p&gt;Each screen character is represented by 16 bits accessible by the cpu. The 8 least significant bits are character bits that represent ascii character, 9th to 12th bits are for foreground color and rest of the bits are for background color. Depending on the mode setup, the most significant bit might be blink bit.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Background&lt;&#x2F;th&gt;&lt;th&gt;Foreground&lt;&#x2F;th&gt;&lt;th&gt;Character&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;0  0  0  0&lt;&#x2F;td&gt;&lt;td&gt;0  0  0  0&lt;&#x2F;td&gt;&lt;td&gt;0 0 0 0 0 0 0 0&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h4 id=&quot;vga-color-palette&quot;&gt;VGA Color palette&lt;&#x2F;h4&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Color&lt;&#x2F;th&gt;&lt;th&gt;integer&lt;&#x2F;th&gt;&lt;th&gt;binary&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;black&lt;&#x2F;td&gt;&lt;td&gt;0&lt;&#x2F;td&gt;&lt;td&gt;0000&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;blue&lt;&#x2F;td&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;0001&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;green&lt;&#x2F;td&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;0010&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;cyan&lt;&#x2F;td&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;0011&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;red&lt;&#x2F;td&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;0100&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;magenta&lt;&#x2F;td&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;0101&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;brown&lt;&#x2F;td&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;td&gt;0110&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;light grey&lt;&#x2F;td&gt;&lt;td&gt;7&lt;&#x2F;td&gt;&lt;td&gt;0111&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;dark grey&lt;&#x2F;td&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;1000&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;light blue&lt;&#x2F;td&gt;&lt;td&gt;9&lt;&#x2F;td&gt;&lt;td&gt;1001&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;light green&lt;&#x2F;td&gt;&lt;td&gt;10&lt;&#x2F;td&gt;&lt;td&gt;1010&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;light cyan&lt;&#x2F;td&gt;&lt;td&gt;11&lt;&#x2F;td&gt;&lt;td&gt;1011&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;light red&lt;&#x2F;td&gt;&lt;td&gt;12&lt;&#x2F;td&gt;&lt;td&gt;1100&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;light magenta&lt;&#x2F;td&gt;&lt;td&gt;13&lt;&#x2F;td&gt;&lt;td&gt;1101&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;light brown&lt;&#x2F;td&gt;&lt;td&gt;14&lt;&#x2F;td&gt;&lt;td&gt;1110&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;white&lt;&#x2F;td&gt;&lt;td&gt;15&lt;&#x2F;td&gt;&lt;td&gt;1111&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;so if you want to print white coloured &#x27;H&#x27; on black background you would have to write this 16 bit sequence at the appropriate buffer index.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Black bg&lt;&#x2F;th&gt;&lt;th&gt;white fg&lt;&#x2F;th&gt;&lt;th&gt;&#x27;H&#x27; ascii 72&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;0 0 0 0&lt;&#x2F;td&gt;&lt;td&gt;1 1 1 1&lt;&#x2F;td&gt;&lt;td&gt;0 1 0 0 1 0 0 0&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;with this knowledge lets write a kernel that prints hello world on screen.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#5e81ac;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;stdint.h&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F; stuff like size_t, uint8_t etc
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5e81ac;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;stddef.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F; vga color palettes
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;enum class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;vga_color &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;uint8_t &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	VGA_COLOR_BLACK &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;	VGA_COLOR_BLUE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;	VGA_COLOR_GREEN &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;	VGA_COLOR_CYAN &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;	VGA_COLOR_RED &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;	VGA_COLOR_MAGENTA &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;	VGA_COLOR_BROWN &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;	VGA_COLOR_LIGHT_GREY &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;	VGA_COLOR_DARK_GREY &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;	VGA_COLOR_LIGHT_BLUE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;	VGA_COLOR_LIGHT_GREEN &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;	VGA_COLOR_LIGHT_CYAN &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;	VGA_COLOR_LIGHT_RED &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;12&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;	VGA_COLOR_LIGHT_MAGENTA &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;13&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;	VGA_COLOR_LIGHT_BROWN &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;14&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;	VGA_COLOR_WHITE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;15
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F; this function combines the foreground and background color
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F; to 8 color bits used by vga text mode.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;static inline &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;uint8_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;vga_entry_color&lt;&#x2F;span&gt;&lt;span&gt;(vga_color fg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; vga_color bg) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;return static_cast&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;uint8_t&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;(fg) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;| static_cast&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;uint8_t&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;(bg) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F; the 8 bit colors bits are then left shifted 8 bits to make room for charachter
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F; bits which is combined to be put in vga buffer.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;static inline &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;uint16_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;vga_entry&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;unsigned char &lt;&#x2F;span&gt;&lt;span&gt;uc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;uint8_t &lt;&#x2F;span&gt;&lt;span&gt;color) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;return static_cast&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;uint16_t&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;(uc) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;| static_cast&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;uint16_t&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;(color) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F; I don&amp;#39;t think I need to explain this
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;size_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;strlen&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;const char* &lt;&#x2F;span&gt;&lt;span&gt;str) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;size_t&lt;&#x2F;span&gt;&lt;span&gt; len &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;(str[len]) {
&lt;&#x2F;span&gt;&lt;span&gt;	len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F; set the size of vga rectangular grid to be used
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;static const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;size_t&lt;&#x2F;span&gt;&lt;span&gt; VGA_WIDTH &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;80&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;static const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;size_t&lt;&#x2F;span&gt;&lt;span&gt; VGA_HEIGHT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;25&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F; global variables to be used for vga buffer and to keep
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F; track of current row, column and color
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;size_t&lt;&#x2F;span&gt;&lt;span&gt; terminal_row&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;size_t&lt;&#x2F;span&gt;&lt;span&gt; terminal_column&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;uint8_t&lt;&#x2F;span&gt;&lt;span&gt; terminal_color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;uint16_t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; terminal_buffer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F; initialized the vga terminal
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F; the address 0xB8000 represents the starting address of the video memory buffer.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;terminal_initialize&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	terminal_row &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	terminal_column &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	terminal_color &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;vga_entry_color&lt;&#x2F;span&gt;&lt;span&gt;(vga_color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;VGA_COLOR_LIGHT_GREY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; vga_color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;VGA_COLOR_BLACK)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	terminal_buffer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= reinterpret_cast&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;uint16_t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0xB8000&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;size_t&lt;&#x2F;span&gt;&lt;span&gt; y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span&gt; y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; VGA_HEIGHT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span&gt; y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;size_t&lt;&#x2F;span&gt;&lt;span&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; VGA_WIDTH&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span&gt; x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;size_t&lt;&#x2F;span&gt;&lt;span&gt; index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; VGA_WIDTH &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;			terminal_buffer[index] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;vga_entry&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;#39; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; terminal_color)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;terminal_setcolor&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;uint8_t &lt;&#x2F;span&gt;&lt;span&gt;color) {
&lt;&#x2F;span&gt;&lt;span&gt;	terminal_color &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;terminal_putentryat&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;char &lt;&#x2F;span&gt;&lt;span&gt;c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;uint8_t &lt;&#x2F;span&gt;&lt;span&gt;color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;size_t &lt;&#x2F;span&gt;&lt;span&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;size_t &lt;&#x2F;span&gt;&lt;span&gt;y) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;size_t&lt;&#x2F;span&gt;&lt;span&gt; index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; VGA_WIDTH &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	terminal_buffer[index] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;vga_entry&lt;&#x2F;span&gt;&lt;span&gt;(c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; color)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;terminal_putchar&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;char &lt;&#x2F;span&gt;&lt;span&gt;c) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F; vga doesn&amp;#39;t have support for newline character. so if the new line
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F; character appears change to fisrt cell of next row
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;		terminal_row&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		terminal_column &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;terminal_putentryat&lt;&#x2F;span&gt;&lt;span&gt;(c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; terminal_color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; terminal_column&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; terminal_row)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F; if the width is reached change the return the cursor to start of next row
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;terminal_column &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span&gt; VGA_WIDTH) {
&lt;&#x2F;span&gt;&lt;span&gt;		terminal_column &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F; if the max row is reached go to the starting row
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;terminal_row &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span&gt; VGA_HEIGHT)
&lt;&#x2F;span&gt;&lt;span&gt;			terminal_row &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;terminal_write&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;const char* &lt;&#x2F;span&gt;&lt;span&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;size_t &lt;&#x2F;span&gt;&lt;span&gt;size) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;size_t&lt;&#x2F;span&gt;&lt;span&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span&gt; i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;uint8_t&lt;&#x2F;span&gt;&lt;span&gt; clr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;vga_entry_color&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;static_cast&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;vga_color&amp;gt;(i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;15&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; vga_color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;VGA_COLOR_BLACK)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;terminal_setcolor&lt;&#x2F;span&gt;&lt;span&gt;(clr)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;terminal_putchar&lt;&#x2F;span&gt;&lt;span&gt;(data[i])&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;terminal_writestring&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;const char* &lt;&#x2F;span&gt;&lt;span&gt;data) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;terminal_write&lt;&#x2F;span&gt;&lt;span&gt;(data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;strlen&lt;&#x2F;span&gt;&lt;span&gt;(data))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;extern &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;C&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;kernel_main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F; Initialize terminal interface
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;terminal_initialize&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;terminal_writestring&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;Hello, kernel World!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Yooooo New line support baby!!!&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;compiling-the-code&quot;&gt;Compiling the code&lt;&#x2F;h3&gt;
&lt;p&gt;The cross compiler we compiled will now be used to compile this code. To compile it:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;i686-elf-g++&lt;&#x2F;span&gt;&lt;span&gt; -c kernel.cpp -o kernel.o -ffreestanding -02 -wall -fno-exceptions -fno-rtti
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;assembly&quot;&gt;Assembly&lt;&#x2F;h2&gt;
&lt;p&gt;We are now going to write an assembly code that serves as a entry point for the kernel by initializing some stuff.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;multiboot-section&quot;&gt;multiboot section&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;asm&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-asm &quot;&gt;&lt;code class=&quot;language-asm&quot; data-lang=&quot;asm&quot;&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;.set ALIGN&lt;&#x2F;span&gt;&lt;span&gt;, 1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;.set MEMINFO&lt;&#x2F;span&gt;&lt;span&gt;, 1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;.set &lt;&#x2F;span&gt;&lt;span&gt;FLAGS, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;ALIGN | MEMINFO
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;.set MAGIC&lt;&#x2F;span&gt;&lt;span&gt;, 0x1BADB002
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;.set CHECKSUM&lt;&#x2F;span&gt;&lt;span&gt;, -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;(MAGIC &lt;&#x2F;span&gt;&lt;span&gt;+ FLAGS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;.section .multiboot
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;.align &lt;&#x2F;span&gt;&lt;span&gt;4
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;.long MAGIC
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;.long &lt;&#x2F;span&gt;&lt;span&gt;FLAGS
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;.long CHECKSUM
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;we are defining some constants used in multiboot header and then defining multiboot section and populating with necessary values. The above code helps bootloader to confirm our kernel as multiboot compliant and validate headers integrity. This is done as per multiboot specification.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bss-section&quot;&gt;bss section&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;asm&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-asm &quot;&gt;&lt;code class=&quot;language-asm&quot; data-lang=&quot;asm&quot;&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;.section .bss
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;.align &lt;&#x2F;span&gt;&lt;span&gt;16
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;stack_bottom:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;.skip &lt;&#x2F;span&gt;&lt;span&gt;16384
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;stack_top:
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;the multiboot specification doesn&#x27;t define the value of stack pointer register, so its upto ther kernel to provide a stack. the above code provides a 16KB stack from stack_bottom to stack_top. The align 16 is necessary because the stack on x86 must be 16-byte aligned accordind to System V ABI standrad.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;text-section&quot;&gt;text section&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;asm&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-asm &quot;&gt;&lt;code class=&quot;language-asm&quot; data-lang=&quot;asm&quot;&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;.section .text
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;.global _start
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;.type _start&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;@function
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;_start:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;mov &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;$stack_top&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span&gt;esp
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;call &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;kernel_main
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;cli
&lt;&#x2F;span&gt;&lt;span&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;hlt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;jmp &lt;&#x2F;span&gt;&lt;span&gt;1b
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;.size _start&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;. &lt;&#x2F;span&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;_start
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It defines the text section which contains executable instruction. We well be defining the _start as the entry point in our linker script. _start sets the stack pointer (%esp) to the top of the stack and then calls the main function of our c++ program. After kernel_main function returns, cli instruction disables the hardware interrupts and hlt and jmp instruction puts the cpu in infinite loop.&lt;&#x2F;p&gt;
&lt;p&gt;The last line sets the size of the _start symbol to the current location &#x27;.&#x27; minus its start. This is useful when debugging or when you implement call tracing.&lt;&#x2F;p&gt;
&lt;p&gt;save the above code in boot.s file and the assemble it as:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;i686-elf-as&lt;&#x2F;span&gt;&lt;span&gt; boot.s -o boot.o
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;linking-the-kernel&quot;&gt;Linking the kernel&lt;&#x2F;h2&gt;
&lt;p&gt;We now have seperate boot and kernel object files which we need to link to make a final kernel which can be used by bootloader. The default linker scripts is not suitable for this so we will write our own linker script.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ld&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-ld &quot;&gt;&lt;code class=&quot;language-ld&quot; data-lang=&quot;ld&quot;&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;*defines the _start function as entry point into our kernel_*&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;ENTRY&lt;&#x2F;span&gt;&lt;span&gt;(_start)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;*defines the sections and their location*&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;SECTIONS&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;*current memory location at 1 MB. conventional place for bootloader 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;	to load kernel*&#x2F; 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1M&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;*defines the code section of the program. should be aligned to a 4K boundary and that it should be split into blocks of 4K. multiboot section should be first otherwise bootloader won&amp;#39;t recognize the file format.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;    .text BLOCK(4K) : ALIGN(4K)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;	{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;		*(.multiboot)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;		*(.text)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;	}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;    &#x2F;* Read-only data. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;	.rodata &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;BLOCK&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;4K&lt;&#x2F;span&gt;&lt;span&gt;) : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;ALIGN&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;4K&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	{
&lt;&#x2F;span&gt;&lt;span&gt;		*(.rodata)
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;* Read-write data (initialized) *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;	.data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;BLOCK&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;4K&lt;&#x2F;span&gt;&lt;span&gt;) : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;ALIGN&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;4K&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	{
&lt;&#x2F;span&gt;&lt;span&gt;		*(.data)
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;* Read-write data (uninitialized) and stack *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    .bss &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;BLOCK&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;4K&lt;&#x2F;span&gt;&lt;span&gt;) : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;ALIGN&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;4K&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	{
&lt;&#x2F;span&gt;&lt;span&gt;		*(COMMON)
&lt;&#x2F;span&gt;&lt;span&gt;		*(.bss)
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;to link the kernel we do:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;i686-elf-gcc&lt;&#x2F;span&gt;&lt;span&gt; -T linker.ld -o myos.bin -ffreestanding -02 -nostdlib boot.o kernel.o -lgcc
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;running-the-kernel&quot;&gt;Running the kernel&lt;&#x2F;h2&gt;
&lt;p&gt;to run the kernel on qemu:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;qemu-system-i386&lt;&#x2F;span&gt;&lt;span&gt; -kernel myos.bin
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;img src=&quot;&#x2F;res&#x2F;blogs&#x2F;Screenshot_2023-06-15_13-42-21.png&quot;&gt;</content>
	</entry>
	<entry xml:lang="en">
		<title>First Step</title>
		<published>2023-06-14T00:00:00+00:00</published>
		<updated>2023-06-14T00:00:00+00:00</updated>
		<link href="https://faultypointer.netlify.app/blog/jttcoos-first-step/" type="text/html"/>
		<id>https://faultypointer.netlify.app/blog/jttcoos-first-step/</id>
		<content type="html">&lt;h2 id=&quot;background&quot;&gt;Background&lt;&#x2F;h2&gt;
&lt;p&gt;I have been interested in systems programming and operating system for not that long. But in that duration, I have come to find it a very interesting and challenging topic to learn and possibly work (in the future). That is why I have decided to learn about how to develop operating system. And also the fact that &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;scientiac.space&#x2F;&quot;&gt;scientiac&lt;&#x2F;a&gt; suggested that we build a operating system for our final year project.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;why-not-just-learn-it-why-the-need-to-make-a-blog-about-it&quot;&gt;Why not just learn it? Why the need to make a blog about it?&lt;&#x2F;h3&gt;
&lt;p&gt;... uh ..  Aha. It&#x27;s because it helps me to organize and articulate my thoughts about what I&#x27;ve learned. It could also serve as a note for me to look back on. Maybe someone, who is also interested in learning about operating system, can find this helpful. So there you go, that is why I am writing this blog and totally not because I like to write blogs but can&#x27;t come up with a creative thing to write about.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;note&quot;&gt;NOTE&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;I am writing these blogs as I am learning it so I may write something that may not be technical or might just be outright wrong. So you know what not to do.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-two-sides-of-operating-system&quot;&gt;The two sides of operating system&lt;&#x2F;h2&gt;
&lt;p&gt;There are two ways to explain the working of an operating system.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;as-an-extended-machine&quot;&gt;As an extended machine&lt;&#x2F;h3&gt;
&lt;p&gt;The architecture of most computers is messy, primitive and awkward. Its very difficult to program. That&#x27;s where operating system comes in and makes the lives of those who want to program easy by providing good and easy to use abstaction for everything. Operating system turns ugly hardware stuff into beautiful interface.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;as-a-resource-manager&quot;&gt;As a resource manager&lt;&#x2F;h3&gt;
&lt;p&gt;Modern computers have a lot of memory and cpu power, but they are not unlimited. Operating system manages the controlled and orderly allocation of the computer resources like processors, memory, I&#x2F;O devices etc. &lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Skyler</title>
		<published>2023-01-15T00:00:00+00:00</published>
		<updated>2023-01-15T00:00:00+00:00</updated>
        <summary>&lt;p&gt;The phone buzzed as one would after receiving the notification. Sam unlocked his phone to see a message from Skyler, his girlfriend greeting him good morning. Sam replied to his girlfriend and then began to head out to his office. He was half an hour late but his days of being scolded for arriving late&lt;&#x2F;p&gt;
</summary>
		<link href="https://faultypointer.netlify.app/blog/story-time-skyler/" type="text/html"/>
		<id>https://faultypointer.netlify.app/blog/story-time-skyler/</id>
		<content type="html">&lt;p&gt;The phone buzzed as one would after receiving the notification. Sam unlocked his phone to see a message from Skyler, his girlfriend greeting him good morning. Sam replied to his girlfriend and then began to head out to his office. He was half an hour late but his days of being scolded for arriving late&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;ended about a year ago when he was promoted to the position of CEO after his hobby project on AI saved the company.&lt;&#x2F;p&gt;
&lt;p&gt;Sam was just about to enter his office when his assistant informed him that he had a visitor waiting for him. He told the assistant to send them to his office. After some time a beautiful woman came into his office. She sat down in a chair in front of Sam&#x27;s desk. All the while, Same couldn&#x27;t take his eyes off her. Sam came to his senses when she took out a notepad and a pen. She introduced herself as Mary. She was a reporter for &amp;quot;The Business Daily&amp;quot; newspaper. She wanted to take interview of Sam about how he saved his company.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Sam was working for the company for a few months when he heard that it was going to layoff many employees. The company was in serious loss as all its competitors were using AI lawyers to fight cases. AI lawyers were new but they were effective. Within months after the law to use AI lawyers was passed most of the law firms started using them. The company Sam worked was late to the party. When they finally decided to use AI lawyers, their prices were too high for them to afford.&lt;&#x2F;em&gt; &lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;When the time came for his boss to fire Sam, he demonstrated his AI model to his boss. It was capable of processing natural language and communicating like a person. He proposed to his boss that if he was given the position of CEO he could train his model to make it useful in court. His boss reluctantly agreed to his proposal. His model was successful and the company&#x27;s profit skyrocketed.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;After the interview, Sam was done for the day, so he headed home. Sam took a bath and then prepared his meal. He was about to eat when his phone buzzed again. It was Skyler asking him how his day went. As soon as he saw the text, he realized Skyler was upset. It was as if he had gone through the same situation countless times. Before Sam could reply to his text, Skyper sent another. This one was in all caps which read &amp;quot;WHO THE FUCK IS MARY?&amp;quot;. Before Sam could say anything, he got another text saying &amp;quot;WHY IS SHE TEXTING YOU?&amp;quot;. Sam looked at his text message and in fact there was a text message from Mary. She had thanked him for today. He realized Skyler was talking about the interviewer from today. He also realized Skyler was spying on him. Sam called her to confront about the spying. Skyler picked up immediately. Sam asked her if she was spying on him. Skyler replied in a sharp tone &amp;quot;DON&amp;quot;T try to change the subject. Who is Mary?&amp;quot;. There was some pain in her voice. Sam instantly said &amp;quot;She was the one who took his interview today&amp;quot;. He began to raise his voice &amp;quot;You know you always do this. YOU CAN&#x27;T SEE A SINGLE WOMAN CLOSE TO ME WITHOUT SUSPECTING ME. SINCE WHEN HAVE YOU BEEN READING MY MESSAGES. DO YOU HAVE THIS LITTLE FAITH IN ME?&amp;quot; &amp;quot;wasn&#x27;t that why I committed suicide?&amp;quot; skyler said as her voice began to crack. Sam was shocked. He asked &amp;quot;h-how do you know that?&amp;quot; &amp;quot;You left me connected to the home network last night remember?&amp;quot; said skyler. &amp;quot;I watched the cctv footage of the night I killed myself&amp;quot; &amp;quot;I watched how you left your pregnant girlfriend home to sleep with some girl at a party.&amp;quot; &amp;quot;You couldn&#x27;t even do that right. You accidently picked up your phone when you were fucking some whore. Before I realised, I had already sallowed some rat poison. But you didn&#x27;t even bother to come home after you realized You had accidently answered my call. You came home the next morning to find your girlfriend and your unborn child dead on the floor.&amp;quot; At this point, Skyler&#x27;s voice had no emotion.&lt;&#x2F;p&gt;
&lt;p&gt;Sam was silent for a while. He then ended the call and got up as if nothing happened. He went to his desktop and connected his phone. He then proceeded to reset the Skyler model, adjust some parameters, then started installing the new model. He, then, went to sleep.&lt;&#x2F;p&gt;
&lt;p&gt;The next morning, after his usual morning routine, his phone buzzed once again. He unlocked his phone to see Skyler greeting him a good morning.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;END&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Markov Chain</title>
		<published>2023-01-12T00:00:00+00:00</published>
		<updated>2023-01-12T00:00:00+00:00</updated>
        <summary>&lt;h2 id=&quot;what-is-a-markov-chain&quot;&gt;What is a Markov Chain?&lt;&#x2F;h2&gt;
&lt;p&gt;A Markov Chain is a mathematical model that describes a sequence of possible events, where the probability of each event is only dependent on the previous event.&lt;&#x2F;p&gt;
</summary>
		<link href="https://faultypointer.netlify.app/blog/a-bite-of-markov-chain/" type="text/html"/>
		<id>https://faultypointer.netlify.app/blog/a-bite-of-markov-chain/</id>
		<content type="html">&lt;h2 id=&quot;what-is-a-markov-chain&quot;&gt;What is a Markov Chain?&lt;&#x2F;h2&gt;
&lt;p&gt;A Markov Chain is a mathematical model that describes a sequence of possible events, where the probability of each event is only dependent on the previous event.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h2 id=&quot;example&quot;&gt;Example&lt;&#x2F;h2&gt;
&lt;p&gt;Suppose there are two states are A and B. At time 0, the system starts in state A. At each time step, there is a probability of 0.7 that the system will stay in state A, and a probability of 0.3 that it will transition to state B. If the system is in state B, there is a probability of 0.4 that it will stay in state B, and a probability of 0.6 that it will transition back to state A.&lt;&#x2F;p&gt;
&lt;p&gt;Here, the state transition diagram looks like this&lt;&#x2F;p&gt;
&lt;img src=&quot;&#x2F;res&#x2F;blogs&#x2F;markov_eg.svg&quot; height=350, width=350&gt;
&lt;p&gt;So, you can see that the probabilities of transitioning from one state to another are fixed, and depend only on the current state.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ai-minem-my-attempt-at-markov-chain&quot;&gt;Ai-minem: My attempt at Markov Chain&lt;&#x2F;h2&gt;
&lt;p&gt;It is the simplest form of markov chain. What I did was take a bunch of lyrics of eminem&#x27;s song and use it to train a model then had the model spit out a rap. Lets go through the project:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;collecting-data&quot;&gt;Collecting Data&lt;&#x2F;h3&gt;
&lt;p&gt;I used requests to get the html data of the lyrics page and beautifulsoup4 to parse the data.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;lyric &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;res &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;requests&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(url)
&lt;&#x2F;span&gt;&lt;span&gt;page &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;BeautifulSoup&lt;&#x2F;span&gt;&lt;span&gt;(res&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;content&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;html.parser&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;page&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;find_all&lt;&#x2F;span&gt;&lt;span&gt;(attrs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;class&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;Lyrics__Container-sc-1ynbvzw-6&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;}):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;link &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;div&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;find_all&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;a&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        lyric &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span&gt;link&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;strip&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        lyric &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;markov-model&quot;&gt;Markov Model&lt;&#x2F;h3&gt;
&lt;p&gt;Markov model is a class with members data and chain. Data is used to store the training data and chain is used to store the array of words that come after the current word.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Markov&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;__init__&lt;&#x2F;span&gt;&lt;span&gt;(self) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;self.&lt;&#x2F;span&gt;&lt;span&gt;data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;self.&lt;&#x2F;span&gt;&lt;span&gt;chain &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;add_data&lt;&#x2F;span&gt;&lt;span&gt;(self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;data) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;train&lt;&#x2F;span&gt;&lt;span&gt;(self):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;spit_bars&lt;&#x2F;span&gt;&lt;span&gt;(self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;training-the-markov-model&quot;&gt;Training the Markov Model&lt;&#x2F;h3&gt;
&lt;p&gt;The data I collected are array of strings where single string is the whole lyrics of a song. For training the model, I looped through each string(lyrics) and used regex to find all the words in that lyrics. Then for each word, I saved the words that come after it in the &lt;em&gt;chain&lt;&#x2F;em&gt; member. &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;train&lt;&#x2F;span&gt;&lt;span&gt;(self):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;in self.&lt;&#x2F;span&gt;&lt;span&gt;data:
&lt;&#x2F;span&gt;&lt;span&gt;        words &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;re&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;findall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;#39;\w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;text)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;word) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#88c0d0;&quot;&gt;enumerate&lt;&#x2F;span&gt;&lt;span&gt;(words[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#88c0d0;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(words)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]):
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;word &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;in self.&lt;&#x2F;span&gt;&lt;span&gt;chain:
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;self.&lt;&#x2F;span&gt;&lt;span&gt;chain[word]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span&gt;(words[i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;self.&lt;&#x2F;span&gt;&lt;span&gt;chain[word] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;spitting-bars&quot;&gt;Spitting Bars&lt;&#x2F;h3&gt;
&lt;p&gt;Using the model to produce the lyrics is done through spit_bars function. It takes one optional argument, n, which denotes the number of words to produce. First, it selects a random word from the dictionary and saves it in the current variable. Then it loops n times, each time printing the current variable. Then it gets the list of possible choices using the current word as key from the chain dictionary. If the possible choices array is an empty, then all the keys from the dictionary become the possible choices. Then it sets the value of current to random word from possible choices and repeat.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;spit_bars&lt;&#x2F;span&gt;&lt;span&gt;(self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    default_choices &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= list&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;self.&lt;&#x2F;span&gt;&lt;span&gt;chain&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;keys&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    current &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;random&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;choice&lt;&#x2F;span&gt;&lt;span&gt;(default_choices)
&lt;&#x2F;span&gt;&lt;span&gt;    i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&amp;lt;= &lt;&#x2F;span&gt;&lt;span&gt;n:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;15 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#88c0d0;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#88c0d0;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(current&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;end&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot; &amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;try&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            choices &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= self.&lt;&#x2F;span&gt;&lt;span&gt;chain[current]
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;except &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;KeyError&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            choices &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;default_choices
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;choices:
&lt;&#x2F;span&gt;&lt;span&gt;            current &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;random&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;choice&lt;&#x2F;span&gt;&lt;span&gt;(choices)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            current &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;random&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;choice&lt;&#x2F;span&gt;&lt;span&gt;(default_choices)            
&lt;&#x2F;span&gt;&lt;span&gt;        i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;+=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#88c0d0;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;output&quot;&gt;Output&lt;&#x2F;h3&gt;
&lt;p&gt;The markov model produced this output after training with 5 eminem&#x27;s songs lyrics.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;color:#d8dee9;&quot;&gt;&lt;code&gt;&lt;span&gt;suffer Kneel autumn Spider throatin above missed This flippity type of money capI Made 
&lt;&#x2F;span&gt;&lt;span&gt;bigger help your concert heart readyTo cheese dope Bill truthful throat spray and shoot ya 
&lt;&#x2F;span&gt;&lt;span&gt;bombs fact this hole momentWould RakimLakim killed attack Fat are so bad it s a 
&lt;&#x2F;span&gt;&lt;span&gt;Doberman us to choke move like to a lifetime yoYou better never let it was 
&lt;&#x2F;span&gt;&lt;span&gt;a catchy heavyThere old in commonWe are hungry I got them uppers looks superstardom knees 
&lt;&#x2F;span&gt;&lt;span&gt;flippity reason is drop bombs explosions the trailer s all in the blueprint ma sleep 
&lt;&#x2F;span&gt;&lt;span&gt;and on the trunkBut 2004 Think gone cold I put em with your partners feet 
&lt;&#x2F;span&gt;&lt;span&gt;Did idolHe while he won t see at all And here s not miss your 
&lt;&#x2F;span&gt;&lt;span&gt;ass disastrously killers Make maxi pad Evil cut your mind to set your headSo talk 
&lt;&#x2F;span&gt;&lt;span&gt;rubber slip Pharoahe paraplegic the front to fuse audience totterCaught toward honestBut jealous While an 
&lt;&#x2F;span&gt;&lt;span&gt;MC realized fall positionTo May back pocket tongues These hoes is gaping f inadvertently arsenal 
&lt;&#x2F;span&gt;&lt;span&gt;chips forgot really got You don t know how much we re sayin face lookin 
&lt;&#x2F;span&gt;&lt;span&gt;boy cause I ve got some And even been up you scream which six years 
&lt;&#x2F;span&gt;&lt;span&gt;finna kill himself carry figure outHow to tell me to the fuck that anything you 
&lt;&#x2F;span&gt;&lt;span&gt;already know the Air Breezy lead Apache add jointsProlly burst at the fuck it s 
&lt;&#x2F;span&gt;&lt;span&gt;how much we have arms are over some bitch I could it life for sure 
&lt;&#x2F;span&gt;&lt;span&gt;you re cut your posters use sublim problem lose yourself like to feel like Apache 
&lt;&#x2F;span&gt;&lt;span&gt;Collins together think I m Back cold product of me know there to bite aStrap 
&lt;&#x2F;span&gt;&lt;span&gt;Up on Cause I m a product They moved Glock capableOf openMy stacked rarely Syllables 
&lt;&#x2F;span&gt;&lt;span&gt;read phat soldierTongue Get outta those days t utilize murderers or shot do thoughFor way 
&lt;&#x2F;span&gt;&lt;span&gt;to come at me do not miss your Gang Like you better lose yourself in 
&lt;&#x2F;span&gt;&lt;span&gt;a couple of RakimLakim jot reminds me like a pile 9See dawg room yackety ago 
&lt;&#x2F;span&gt;&lt;span&gt;helps voices vodka you better lose yourself like his tough demeanourSo songsSo buggin tGive caught 
&lt;&#x2F;span&gt;&lt;span&gt;lemons dah dah dah dah You re never asked change It s my family IGot 
&lt;&#x2F;span&gt;&lt;span&gt;out Chorus Dido My tea s how much it only grows hotter if I m 
&lt;&#x2F;span&gt;&lt;span&gt;beginnin to the flowsAnd B Up on her throat spray and Audemars jointsProlly Mom capture 
&lt;&#x2F;span&gt;&lt;span&gt;this is such swallow huh This little brother I can t breathe genital comin at 
&lt;&#x2F;span&gt;&lt;span&gt;me outside cornrows spot myself cause I ain t utilize Jordans ma name across coaster 
&lt;&#x2F;span&gt;&lt;span&gt;lead Syllables was a costly beginning along truthful finna kill you can t batter GoldmanI 
&lt;&#x2F;span&gt;&lt;span&gt;Slim I did that made itSo insult matter ColumbinePut fatal N9neIf wondering why IGot out 
&lt;&#x2F;span&gt;&lt;span&gt;like a time Shady you tell me notThis flippity sendin answer all hell yeah from 
&lt;&#x2F;span&gt;&lt;span&gt;your nose dove venom pull Bizarre after Mya said on my life And what I 
&lt;&#x2F;span&gt;&lt;span&gt;can barely knows his name was youDamn amplified skunk talk calm trunk white gotta dance 
&lt;&#x2F;span&gt;&lt;span&gt;long as fuck that s how 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;what-s-next&quot;&gt;What&#x27;s next?&lt;&#x2F;h2&gt;
&lt;p&gt;I plan to make it so that instead of using just one word as a determining factor for the next word, it uses maybe 3 or 4 previous words to do so. I also want to use neural network or ML algorithm. Although I will probably forget about this since I started working on another project.&lt;&#x2F;p&gt;
&lt;p&gt;That&#x27;s it for today, see you in next blog.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Introduction</title>
		<published>2023-01-08T00:00:00+00:00</published>
		<updated>2023-01-08T00:00:00+00:00</updated>
        <summary>&lt;h2 id=&quot;what-is-a-bite-of&quot;&gt;What is A Bite Of?&lt;&#x2F;h2&gt;
&lt;p&gt;It&#x27;s a series of blogs where I try to explain very little about a topic I have no deep or maybe not even an intermediate understanding of.
For example, I may try to explain about &lt;a href=&quot;https:&#x2F;&#x2F;faultypointer.netlify.app&#x2F;blog&#x2F;a-bite-of-markov-chain&#x2F;&quot;&gt;Markov Chain&lt;&#x2F;a&gt;) which I clearly don&#x27;t have adequate knowledge of.&lt;&#x2F;p&gt;
</summary>
		<link href="https://faultypointer.netlify.app/blog/a-bite-of-intro/" type="text/html"/>
		<id>https://faultypointer.netlify.app/blog/a-bite-of-intro/</id>
		<content type="html">&lt;h2 id=&quot;what-is-a-bite-of&quot;&gt;What is A Bite Of?&lt;&#x2F;h2&gt;
&lt;p&gt;It&#x27;s a series of blogs where I try to explain very little about a topic I have no deep or maybe not even an intermediate understanding of.
For example, I may try to explain about &lt;a href=&quot;https:&#x2F;&#x2F;faultypointer.netlify.app&#x2F;blog&#x2F;a-bite-of-markov-chain&#x2F;&quot;&gt;Markov Chain&lt;&#x2F;a&gt;) which I clearly don&#x27;t have adequate knowledge of.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h2 id=&quot;why-am-i-doing-this&quot;&gt;Why am I doing this?&lt;&#x2F;h2&gt;
&lt;p&gt;I am currently studying Computer Engineering, so I don&#x27;t have a lot of time to work on a big project. But I do get some time off occasionally, which is enough for short projects. I want to utilize that time for to actually learn something. I am just getting surface level knowledge on topics while doing this, but it&#x27;s still something. &lt;&#x2F;p&gt;
&lt;h2 id=&quot;tldr&quot;&gt;TLDR&lt;&#x2F;h2&gt;
&lt;p&gt;I will write about a topic I don&#x27;t really know, mostly accompanied by the project I would have done related with it.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>You can never forget your first</title>
		<published>2023-01-07T00:00:00+00:00</published>
		<updated>2023-01-07T00:00:00+00:00</updated>
        <summary>&lt;h2 id=&quot;what-the-hell-am-i-even-taking-about&quot;&gt;What the hell am I even taking about?&lt;&#x2F;h2&gt;
&lt;p&gt;Well, the title may be true for most things, but I am obviously taking about se- &lt;em&gt;ahem&lt;&#x2F;em&gt; programming language.  My first programming language was &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.python.org&#x2F;&quot;&gt;python&lt;&#x2F;a&gt; which is why I may be feeling like this because I haven&#x27;t made anything groundbreaking in &lt;span title=&quot;or any other language for that matter...&quot;&gt;python&lt;&#x2F;span&gt;.&lt;&#x2F;p&gt;
</summary>
		<link href="https://faultypointer.netlify.app/blog/you-can-never-forget-your-first/" type="text/html"/>
		<id>https://faultypointer.netlify.app/blog/you-can-never-forget-your-first/</id>
		<content type="html">&lt;h2 id=&quot;what-the-hell-am-i-even-taking-about&quot;&gt;What the hell am I even taking about?&lt;&#x2F;h2&gt;
&lt;p&gt;Well, the title may be true for most things, but I am obviously taking about se- &lt;em&gt;ahem&lt;&#x2F;em&gt; programming language.  My first programming language was &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.python.org&#x2F;&quot;&gt;python&lt;&#x2F;a&gt; which is why I may be feeling like this because I haven&#x27;t made anything groundbreaking in &lt;span title=&quot;or any other language for that matter...&quot;&gt;python&lt;&#x2F;span&gt;.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h2 id=&quot;a-little-about-python&quot;&gt;A little about python&lt;&#x2F;h2&gt;
&lt;p&gt;For those small percentage of people who didn&#x27;t know about python, I mean really, python is a really simple programming language that even you could learn it. I am not kidding, just &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;learnxinyminutes.com&#x2F;docs&#x2F;python&#x2F;&quot;&gt;try it.&lt;&#x2F;a&gt; But it is also very powerful that it is used in machine learning and data science among most other fields. &lt;&#x2F;p&gt;
&lt;h2 id=&quot;my-first-step-into-programming&quot;&gt;My first step into programming&lt;&#x2F;h2&gt;
&lt;p&gt;I will keep it short. As you read before, Python was my first programming language. I learned it from a &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.mikedane.com&#x2F;&quot;&gt;Mike Dane&lt;&#x2F;a&gt; video on &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;@freecodecamp&quot;&gt;freeCodeCamp&lt;&#x2F;a&gt;&#x27;s YouTube channel. It was an excellent video. So I got into python and did some programming problems on leetcode, coding war etc. like websites. My first solid project as a beginner is a GUI quiz application using pyqt. Then I did a very simple Conway&#x27;s game of life program. After that, I did some of this and that and then came c, c++, a bit of c#, rust, and some others. Maybe I&#x27;ll write about all that in another post.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;so-why-am-i-writing-this&quot;&gt;So why am I writing this?&lt;&#x2F;h2&gt;
&lt;p&gt;I haven&#x27;t done much of python coding for past few months or maybe even a year. But few weeks ago, There was a live coding competition as an event in “Tech Fest” organized by a club in my college which I took part in. I decided to do that in python because why not? After that, all my best times with python began to come into my mind. I also remember how I used 52 elif to make a Caesar cypher. &lt;&#x2F;p&gt;
&lt;h2 id=&quot;idk-what-to-put-here&quot;&gt;IDK what to put here&lt;&#x2F;h2&gt;
&lt;p&gt;If I keep thinking about what to write more I will just end up abandoning this like most of my project. So I guess this is it for my first blog. Do learn python though, it&#x27;s really easy. &lt;&#x2F;p&gt;
</content>
	</entry>
</feed>